# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Critter {
  id: ID!
  name: String!
  species: Species!
  speciesId: ID!
  traits: [CritterTraitUnion!]!
}

input CritterCreateInput {
  name: String!
  speciesId: String!
}

type CritterIntTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueInt: Float
  valueType: CritterTraitValueType!
}

type CritterStringTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueString: String
  valueType: CritterTraitValueType!
}

type CritterTimestampTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueTimestamp: DateTime
  valueType: CritterTraitValueType!
}

interface CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueType: CritterTraitValueType!
}

input CritterTraitCreateInput {
  critterId: ID!
  traitId: ID!
  valueBool: Boolean = null
  valueDate: DateTime = null
  valueInt: Int = null
  valueString: String = null
}

union CritterTraitUnion = CritterIntTrait | CritterStringTrait | CritterTimestampTrait

enum CritterTraitValueType {
  Integer
  String
  Timestamp
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createCritter(input: CritterCreateInput!): Critter!
  createCritterTrait(input: CritterTraitCreateInput!): CritterTraitUnion!
  createSpecies(input: SpeciesCreateInput!): Species!
  createSpeciesTrait(input: SpeciesTraitCreateInput!): SpeciesTrait!
  createTrait(input: TraitCreateInput!): Trait!
}

type Query {
  critters: [Critter!]!
  species(filters: SpeciesFilters): [Species!]!
}

type Species {
  id: ID!
  name: String!
  traits: [Trait!]!
}

input SpeciesCreateInput {
  name: String!
}

input SpeciesFilters {
  name: String = null
}

type SpeciesTrait {
  id: ID!
  speciesId: ID!
  traitId: ID!
}

input SpeciesTraitCreateInput {
  speciesId: ID!
  traitId: ID!
}

type Trait {
  id: ID!
  name: String!
  valueType: CritterTraitValueType!
}

input TraitCreateInput {
  name: String!
  valueType: String!
}
