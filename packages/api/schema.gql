# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  identity: Identity!
  identityId: ID!
  username: String!
}

type Community {
  id: ID!
  name: String!
}

input CommunityCreateInput {
  name: String!
}

type Critter {
  id: ID!
  name: String!
  owner: Identity!
  ownerId: ID!
  species: Species!
  speciesId: ID!
  traitList: TraitList!
  traitListId: ID!
  traits: [CritterTraitUnion!]!
}

input CritterCreateInput {
  name: String!
  speciesId: String!
}

type CritterIntTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueInt: Float
  valueType: CritterTraitValueType!
}

type CritterStringTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueString: String
  valueType: CritterTraitValueType!
}

type CritterTimestampTrait implements CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueTimestamp: DateTime
  valueType: CritterTraitValueType!
}

interface CritterTrait {
  critterId: ID!
  displayValue: String
  id: ID!
  trait: Trait!
  traitId: ID!
  valueType: CritterTraitValueType!
}

input CritterTraitCreateInput {
  critterId: ID!
  traitId: ID!
  valueBool: Boolean = null
  valueDate: DateTime = null
  valueInt: Int = null
  valueString: String = null
}

union CritterTraitUnion = CritterIntTrait | CritterStringTrait | CritterTimestampTrait

enum CritterTraitValueType {
  Enum
  Integer
  String
  Timestamp
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Identity {
  displayName: String!
  email: String!
  id: ID!
}

input LoginArgs {
  password: String = ""
  username: String = ""
}

type LoginResponse {
  account: Account!
  identity: Identity!
  token: String!
}

type Mutation {
  createCommunity(input: CommunityCreateInput!): Community!
  createCritter(input: CritterCreateInput!): Critter!
  createCritterTrait(input: CritterTraitCreateInput!): CritterTraitUnion!
  createSpecies(input: SpeciesCreateInput!): Species!
  createTrait(input: TraitCreateInput!): Trait!
  createTraitList(input: TraitListCreateInput!): TraitList!

  """Log in using local credentials and receive an auth token"""
  login(input: LoginArgs!): LoginResponse!

  """Create a new account and receive an auth token"""
  register(input: RegisterArgs!): LoginResponse!
}

type Query {
  critters: [Critter!]!
  species(filters: SpeciesFilters): [Species!]!
}

input RegisterArgs {
  email: String = ""
  password: String = ""
  username: String = ""
}

"""
Model representing an arbitrarily broad class of charcters that use common trait lists, and administration.
"""
type Species {
  """Community that owns this species"""
  community: Community!

  """ID of the community that owns this species"""
  communityId: ID!
  critters: [Critter!]!
  id: ID!

  """Name of the species"""
  name: String!
  traitLists: [TraitList!]!
}

input SpeciesCreateInput {
  communityId: ID!
  name: String!
}

input SpeciesFilters {
  name: String = null
}

type Trait {
  id: ID!
  name: String!
  valueType: CritterTraitValueType!
}

input TraitCreateEnumValueInput {
  name: String!
}

input TraitCreateInput {
  enumValues: [TraitCreateEnumValueInput!]!
  name: String!
  valueType: CritterTraitValueType!
}

type TraitList {
  id: ID!
  name: String!
  species: Species!
  speciesId: ID!
}

input TraitListCreateInput {
  name: String!
  speciesId: ID!
}
