# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  identity: Identity!
  identityId: ID!
  username: String!
}

interface BaseError {
  message: String!
}

union CommunitiesResponse = CommunityList | InvalidArgumentError

type Community {
  id: ID!
  name: String!
  roles: [Role!]!
}

input CommunityCreateInput {
  name: String!
}

input CommunityFilters {
  id: ID = null
  name: String = null
}

type CommunityList {
  list: [Community!]!
}

union CommunityResponse = Community | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError

union CreateCommunityResponse = Community | DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError

union CreateCritterResponse = Critter | DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError

union CreateSpeciesImageUploadUrlResponse = NotAuthenticatedError | NotAuthorizedError | NotFoundError | UrlResponse

type Critter {
  id: ID!
  name: String!
  owner: Identity!
  ownerId: ID!
  species: Species!
  speciesId: ID!
  traitValues: [CritterTraitValue!]!
  variant: SpeciesVariant!
  variantId: ID!
}

input CritterCreateInput {
  name: String!
  ownerId: ID = null
  speciesId: ID!
  traitValues: [CritterCreateTraitInput!]!
  variantId: ID!
}

input CritterCreateTraitInput {
  traitId: ID!
  value: String!
}

input CritterFilters {
  id: ID = null
  speciesId: ID = null
}

type CritterList {
  list: [Critter!]!
}

union CritterListResponse = CritterList | InvalidArgumentError | NotAuthenticatedError

input CritterModifyInput {
  id: ID!
  name: String
  traitValues: [CritterCreateTraitInput!]
  variantId: ID
}

union CritterModifyResponse = Critter | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError

type CritterTraitValue {
  traitId: ID!
  value: String
}

"""Critter trait value types"""
enum CritterTraitValueType {
  Enum
  Integer
  String
  Timestamp
}

type DeleteResponse {
  ok: Boolean!
}

type DuplicateError implements BaseError {
  duplicateKeys: [String!]!
  message: String!
}

type EnumValue {
  enumValueSettings: [EnumValueSetting!]!
  id: ID!
  name: String!
  order: Int!
  trait: Trait!
  traitId: ID!
}

input EnumValueDeleteInput {
  id: ID!
}

type EnumValueSetting {
  enumValue: EnumValue!
  enumValueId: ID!
  id: ID!
  speciesVariant: [SpeciesVariant!]!
  speciesVariantId: ID!
}

input EnumValueSettingCreateInput {
  enumValueId: ID!
  speciesVariantId: ID!
}

union EnumValueSettingDeleteResponse = DeleteResponse | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError

type Identity {
  displayName: String!
  email: String!
  id: ID!
}

type IdentityList {
  list: [Identity!]!
}

union IdentitylistResponse = IdentityList | NotAuthenticatedError

"""Acceptable MIME types for images"""
enum ImageContentType {
  Gif
  Jpg
  Png
}

type InvalidArgumentError implements BaseError {
  message: String!
  validationErrors: [ValidationError!]!
}

type InviteCode {
  claimCount: Int!
  creator: Identity!
  creatorId: ID!
  id: ID!
  maxClaims: Int!
}

input InviteCodeCreateInput {
  creatorId: ID!
  id: ID!
  maxClaims: Int!
}

union InviteCodeCreateResponse = DuplicateError | InvalidArgumentError | InviteCode | NotAuthenticatedError | NotAuthorizedError

type InviteCodeList {
  list: [InviteCode!]!
}

union InviteCodeResponse = InviteCodeList | NotAuthenticatedError | NotAuthorizedError

input LoginArgs {
  password: String = ""
  username: String = ""
}

type LoginFailureResponse {
  message: String!
}

union LoginResponse = InvalidArgumentError | LoginFailureResponse | LoginSuccessResponse

type LoginSuccessResponse {
  account: Account!
  identity: Identity!
  token: String!
}

type Mutation {
  """Create a new community"""
  createCommunity(input: CommunityCreateInput!): CreateCommunityResponse!
  createCritter(input: CritterCreateInput!): CreateCritterResponse!
  createEnumValueSetting(input: EnumValueSettingCreateInput!): enumValueSettingCreateResponse!
  createInviteCode(input: InviteCodeCreateInput!): InviteCodeCreateResponse!
  createSpecies(input: SpeciesCreateInput!): SpeciesCreateResponse!
  createSpeciesImageUploadUrl(input: SpeciesImageUrlCreateInput!): CreateSpeciesImageUploadUrlResponse!
  createSpeciesVariant(input: SpeciesVariantCreateInput!): SpeciesVariantCreateResponse!
  createTrait(input: TraitCreateInput!): TraitCreateResponse!

  """Add a trait to a variant's trait list"""
  createTraitListEntry(input: TraitListEntryCreateInput!): TraitListEntryCreateResponse!
  deleteEnumValueSetting(input: EnumValueDeleteInput!): EnumValueSettingDeleteResponse!
  deleteTrait(input: TraitDeleteInput!): TraitDeleteResponse!

  """
  Remove a trait from a variant's traitlist. This will delete any values for this trait from all existing characters under the specified variant.
  """
  deleteTraitListEntry(id: ID!): TraitListEntryDeleteResponse!

  """Log in using local credentials and receive an auth token"""
  login(input: LoginArgs!): LoginResponse!
  modifyCritter(input: CritterModifyInput!): CritterModifyResponse!
  modifyTrait(input: TraitModifyInput!): TraitModifyResponse!

  """Update an entry on a variant's trait list"""
  modifyTraitListEntry(input: TraitListEntryModifyInput!): TraitListEntryModifyResponse!

  """Create a new account and receive an auth token"""
  register(input: RegisterArgs!): RegisterResponse!

  """"""
  requestPasswordReset(input: RequestPasswordResetInput!): RequestPasswordResetResponse!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse!
}

"""
This error indicates that the associated field requires authentication and no valid authentication was provided.
"""
type NotAuthenticatedError implements BaseError {
  message: String!
}

"""
This error indicates the associated field requires permissions that the requestor does not posess.
"""
type NotAuthorizedError implements BaseError {
  message: String!
}

type NotFoundError implements BaseError {
  message: String!
}

type Query {
  """Fetch a list of communities with filtering"""
  communities(filters: CommunityFilters!): CommunitiesResponse!

  """Fetch a community by id and/or name"""
  community(filters: CommunityFilters!): CommunityResponse!
  critters(filters: CritterFilters!): CritterListResponse!
  identities: IdentitylistResponse!

  """Fetch invite codes"""
  inviteCodes: InviteCodeResponse!
  species(filters: SpeciesFilters): SpeciesResponse!
  traits(filters: TraitFilters!): TraitListResponse!
}

input RegisterArgs {
  email: String!
  inviteCodeId: String!
  password: String = ""
  username: String = ""
}

union RegisterResponse = DuplicateError | InvalidArgumentError | LoginSuccessResponse

input RequestPasswordResetInput {
  email: String!
}

type RequestPasswordResetReceivedResponse {
  message: String!
}

union RequestPasswordResetResponse = InvalidArgumentError | RequestPasswordResetReceivedResponse

input ResetPasswordInput {
  password: String!
  token: ID!
}

union ResetPasswordResponse = InvalidArgumentError | ResetPasswordSuccessResponse

type ResetPasswordSuccessResponse {
  success: Boolean!
}

type Role {
  canCreateCritter: Boolean!
  canCreateSpecies: Boolean!
  canEditCritter: Boolean!
  canEditSpecies: Boolean!
  community: Community!
  communityId: ID!
  id: ID!
  name: String!
}

"""
Model representing an arbitrarily broad class of characters that use common variants and administration.
"""
type Species {
  """Community that owns this species"""
  community: Community!

  """ID of the community that owns this species"""
  communityId: ID!
  critters: [Critter!]!
  hasImage: String!

  """Icon URL for this species"""
  iconUrl: String
  id: ID!

  """Name of the species"""
  name: String!
  variants: [SpeciesVariant!]!
}

input SpeciesCreateInput {
  communityId: ID!
  name: String!
}

union SpeciesCreateResponse = DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError | Species

input SpeciesFilters {
  communityId: ID!
  id: ID = null
  name: String = null
}

input SpeciesImageUrlCreateInput {
  contentType: ImageContentType!
  speciesId: ID!
}

type SpeciesList {
  list: [Species!]!
}

union SpeciesResponse = InvalidArgumentError | NotAuthenticatedError | SpeciesList

type SpeciesVariant {
  enumValueSettings: [EnumValueSetting!]!
  id: ID!
  name: String!
  species: Species!
  speciesId: ID!
  traitListEntries: [TraitListEntry!]!
}

input SpeciesVariantCreateInput {
  name: String!
  speciesId: ID!
}

union SpeciesVariantCreateResponse = DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError | SpeciesVariant

type Trait {
  enumValues: [EnumValue!]!
  id: ID!
  name: String!
  species: Species!
  valueType: CritterTraitValueType!
}

input TraitCreateEnumValueInput {
  name: String!
  order: Float!
}

input TraitCreateInput {
  enumValues: [TraitCreateEnumValueInput!]!
  name: String!
  speciesId: ID!
  valueType: CritterTraitValueType!
}

union TraitCreateResponse = DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | Trait

input TraitDeleteInput {
  id: ID!
}

union TraitDeleteResponse = DeleteResponse | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError

input TraitFilters {
  speciesId: ID!
}

type TraitList {
  list: [Trait!]!
}

type TraitListEntry {
  defaultDisplayValue: String
  id: ID!
  order: Int!
  required: Boolean!
  speciesVariant: SpeciesVariant!
  speciesVariantId: ID!
  trait: Trait!
  traitId: ID!
  valueType: CritterTraitValueType!
}

"""Input object for creating a new TraitListEntry"""
input TraitListEntryCreateInput {
  order: Int!
  required: Boolean = false
  speciesVariantId: ID!
  traitId: ID!
}

union TraitListEntryCreateResponse = DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError | TraitListEntry

union TraitListEntryDeleteResponse = DeleteResponse | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError

"""Input object for modifying a TraitListEntry"""
input TraitListEntryModifyInput {
  id: ID!
  order: Int
  required: Boolean
}

union TraitListEntryModifyResponse = InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError | TraitListEntry

union TraitListResponse = NotAuthenticatedError | NotAuthorizedError | NotFoundError | TraitList

input TraitModifyEnumValueInput {
  id: ID = null
  name: String!
  order: Float!
}

input TraitModifyInput {
  enumValues: [TraitModifyEnumValueInput!] = null
  id: ID!
  name: String!
  valueType: CritterTraitValueType!
}

union TraitModifyResponse = DuplicateError | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError | Trait

type UrlResponse {
  url: String!
}

type ValidationConstraint {
  description: String!
  key: String!
}

type ValidationError {
  constraints: [ValidationConstraint!]!
  field: String!
}

union enumValueSettingCreateResponse = DuplicateError | EnumValueSetting | InvalidArgumentError | NotAuthenticatedError | NotAuthorizedError | NotFoundError
